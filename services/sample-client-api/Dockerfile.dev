# BUILDER
FROM node:18-alpine AS builder

RUN apk --no-cache add \
      bash \
      g++ \
      ca-certificates \
      lz4-dev \
      musl-dev \
      cyrus-sasl-dev \
      openssl-dev \
      make \
      python3 \
      libc6-compat \
      openssl1.1-compat

RUN apk add --no-cache --virtual .build-deps gcc zlib-dev libc-dev bsd-compat-headers py-setuptools bash

WORKDIR /var/web/

RUN pnpm install -g turbo
COPY . .
RUN turbo prune --scope=sample-client-api --docker

# INSTALLER
# Add lockfile and package.json's of isolated subworkspace
FROM node:18-alpine AS installer

RUN apk --no-cache add \
      bash \
      g++ \
      ca-certificates \
      lz4-dev \
      musl-dev \
      cyrus-sasl-dev \
      openssl-dev \
      make \
      python3 \
      libc6-compat \
      openssl1.1-compat

RUN apk add --no-cache --virtual .build-deps gcc zlib-dev libc-dev bsd-compat-headers py-setuptools bash

WORKDIR /var/web

# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /var/web/out/json/ .
COPY --from=builder /var/web/out/package-lock.json .
RUN pnpm install

# Build the project
COPY --from=builder /var/web/out/full/ .
COPY turbo.json turbo.json

RUN pnpm turbo run build --filter=sample-client-api

# RUNNER
FROM node:18-alpine AS runner

RUN apk --no-cache add \
      bash \
      g++ \
      ca-certificates \
      lz4-dev \
      musl-dev \
      cyrus-sasl-dev \
      openssl-dev \
      make \
      python3 \
      libc6-compat \
      openssl1.1-compat

RUN apk add --no-cache --virtual .build-deps gcc zlib-dev libc-dev bsd-compat-headers py-setuptools bash

WORKDIR /var/web

# Don't run production as root
RUN addgroup --system --gid 1001 nodes && adduser --system --uid 1001 nodejs
USER nodejs

COPY --from=installer --chown=nodejs:nodes /var/web .